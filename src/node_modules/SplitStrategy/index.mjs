import fs from 'fs';
import split from 'split';

export default class SplitStrategy {

  constructor({file, line}){
    this.file = file;
    this.line = line;
  }

  async initialize(){

     fs.createReadStream(this.file)
    .pipe(split(JSON.parse, null, { trailing: false }))
    .on('data', this.line)
    .on('error', function (error) {
      //syntax errors will land here
      //note, this ends the stream.
      console.error(error);
    })

  }

  // note: action is an object
  async dispatch(action){
    if(!action) return;

    // save the object to file
    const payload = JSON.stringify(action)+'\n';
    fs.appendFile(this.file, payload, (error) => {
      if (error) console.error(error);
    });

    // trigger line (with an object, this way is faster)
    const response = await this.line(action);
    return response;
  }

}
