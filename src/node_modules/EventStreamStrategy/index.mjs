import fs from 'fs';
import es from 'event-stream';

export default class EventStreamStrategy {

  constructor({file, line}){
    this.file = file;
    this.line = line;
  }

  async initialize(){

    fs.createReadStream(this.file)
    .pipe(es.split(/(\r?\n)/))
    .pipe( es.map( (data, cb) => { cb( null, data.trim() );}) )
    .pipe( es.filterSync(function (data) { return data.length }) )
    .pipe( es.map( (data, cb) => { this.line(data); cb( null, data );}) )

  }

  async dispatch(action){
    if(!action) return;

    // this will _NOT_ trigger on line
    const payload = JSON.stringify(action)+'\n';
    fs.appendFile(this.file, payload, (error) => {
      // this will _NOT_ trigger tail on line... hence the .write below
      if (error) console.error(error);
    });

    // must manually trigger a write.
    this.line(payload);

  }

}
