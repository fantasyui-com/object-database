import fs from 'fs';
import es from 'event-stream';

export default class EventStreamStrategy {

  constructor({file, line}){
    this.file = file;
    this.line = line;
  }

  async initialize(){

    const splitLines = es.split(/(\r?\n)/);
    const trimLines = es.map( (data, cb) => { cb( null, data.trim() );});
    const filterOutEmpties = es.filterSync(function (data) { return data.length });
    const sendIt = es.map( (data, cb) => { this.line(data); cb( null, data );})

    fs.createReadStream(this.file)
      .pipe( splitLines )
      .pipe( trimLines )
      .pipe( filterOutEmpties )
      .pipe( sendIt )

  }

  async dispatch(action){
    if(!action) return;

    fs.appendFile(this.file, JSON.stringify(action)+'\n', (error) => {
      // this will _NOT_ trigger tail on line... hence the .write below
      if (error) console.error(error);
    });

    // return response to server
    const response = await this.line(action);
    return response;

  }

}
